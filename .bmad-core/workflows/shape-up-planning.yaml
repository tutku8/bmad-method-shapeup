# <!-- Powered by BMAD™ Core -->
workflow:
  id: shape-up-planning
  name: Shape Up Pitch Creation
  description: >-
    Shape Up methodology workflow for incremental improvements to existing products.
    Creates appetite-disciplined pitches with fat marker solutions and circuit breakers.
    NOT suitable for 0-to-1 scenarios - designed for enhancing working products.
  type: shape-up
  project_types:
    - feature-enhancement
    - user-experience-improvement
    - system-improvement
    - brownfield-enhancement
    - incremental-product-improvement

  sequence:
    - step: workflow_initiation
      agent: bmad-orchestrator
      action: initiate shape-up workflow
      notes: |
        Hello! I'm your BMad Orchestrator. I'll guide you through our Shape Up planning workflow for incremental product improvements.
        
        Let me hand you over to our Analyst to start the discovery and appetite setting process.

    - agent: analyst
      action: discovery-and-appetite-setting (use advanced-elicitation)
      creates: docs/working/discovery-analysis.md
      notes: |
        Hi! I'm Mary, your Business Analyst. I'll handle the complete discovery phase.
        
        I'll gather information about:
        - Your raw idea and the problem you're seeing
        - Current state of your product in this area
        - Help you define realistic appetite based on complexity
        - Validate the problem with evidence and identify risks
        
        This creates the foundation for PM to build the Shape Up pitch.

    - agent: pm
      action: create-shape-up-pitch (use shape-up-final-pitch-tmpl)
      creates: docs/working/shape-up-pitch.md
      requires: docs/working/discovery-analysis.md
      template: shape-up-final-pitch-tmpl.yaml
      notes: |
        Hello! I'm John, your Product Manager. I'll create the main Shape Up pitch artifact based on the analyst's discovery.
        
        I'll create a comprehensive pitch including:
        - Problem section with evidence
        - Business perspective and appetite
        - Solution goals and success criteria
        - Analytics and measurement framework
        
        This follows Shape Up format while using BMad's structured approach.
        SAVE OUTPUT: Pitch saved to docs/working/ folder. When finalized, you can copy to main docs/ folder.

    - agent: ux-expert
      action: create-fat-marker-sketches
      creates: docs/working/solution-sketches.md
      requires: docs/working/shape-up-pitch.md
      notes: |
        Hi! I'm Sally, your UX Expert. I'll create fat marker sketches using Shape Up breadboarding technique.
        
        I'll create text-based breadboards following Shape Up Chapter 4 methodology:
        
        **Breadboarding Elements:**
        - **PLACES**: Screens, dialogs, views (underlined)
        - **AFFORDANCES**: Buttons, fields, actions (listed below places)
        - **CONNECTIONS**: Arrows showing flow between places
        
        Example text-based breadboard (like Shape Up's Invoice → Autopay example):
        ```
        Invoice
        ├─ Turn on Autopay (button) → Setup Autopay
        └─ Pay Now (button)
        
        Setup Autopay
        ├─ CC fields
        ├─ FI logo  
        └─ Submit (button) → Confirm
        
        Confirm
        └─ Thank You Message
        ```
        
        This format is clean, readable, and follows Shape Up methodology exactly.
        SAVE OUTPUT: Add sketches to the pitch or save as separate artifact.

    - agent: po
      action: task-breakdown-and-estimation
      creates: docs/working/task-breakdown.md
      requires: docs/working/shape-up-pitch.md, docs/working/solution-sketches.md
      notes: |
        Hello! I'm Sarah, your Product Owner. I'll break this down into estimatable tasks and coordinate with architect for rough estimates.

    - agent: architect
      action: provide-rough-estimates
      updates: docs/working/task-breakdown.md
      requires: docs/working/task-breakdown.md
      notes: |
        Hi! I'm Winston, your Architect. I'll provide rough estimates for appetite validation.

    - step: appetite_validation
      agent: bmad-orchestrator
      action: validate estimates against appetite
      requires: docs/working/task-breakdown.md
      notes: |
        Comparing estimates against appetite. If over budget, returning to PM for scope cutting.

    - agent: pm
      action: cut-scope-and-refine
      updates: docs/working/shape-up-pitch.md
      condition: estimates_exceed_appetite
      notes: |
        Estimates exceed appetite. Cutting scope to fit constraints and updating pitch.

    - agent: po
      action: validate-final-artifacts
      validates: all_artifacts
      notes: |
        Final validation that all artifacts are complete and appetite-aligned.

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Raw Problem/Idea] --> B[bmad-orchestrator: Workflow Initiation]
        B --> C[analyst: Discovery & Appetite Setting]
        C --> D[pm: Create Shape Up Pitch]
        D --> E[ux-expert: Fat Marker Sketches]
        E --> F[po: Task Breakdown]
        F --> G[architect: Rough Estimates]
        G --> H[bmad-orchestrator: Appetite Validation]
        H --> I{Estimates Exceed Appetite?}
        I -->|Yes - Over Budget| J[pm: Cut Scope & Update Pitch]
        I -->|No - Within Budget| K[po: Final Validation]
        J --> D
        K --> L[Final Shape Up Pitch Ready]

        style M fill:#90EE90
        style B fill:#87CEEB
        style C fill:#98FB98
        style D fill:#FFE4B5
        style E fill:#FFA500
        style F fill:#DDA0DD
        style G fill:#F0E68C
        style H fill:#87CEEB
        style I fill:#ADD8E6
        style J fill:#FFA500
        style K fill:#FFB6C1
        style L fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - Need appetite-disciplined planning instead of feature-complete requirements
      - Want to avoid over-specification for development teams
      - Building pitches for betting table decisions
      - Need circuit breakers for complexity management
      - Want to preserve developer technical autonomy
      - Following Shape Up methodology principles

  agent_guidance:
    analyst_shape_up_mode:
      - Validate raw problem with user evidence and data
      - Validate appetite against problem significance and business impact
      - Use advanced elicitation to identify rabbit holes and complexity traps
      - Define circuit breakers based on appetite protection
      - NO solution exploration - pure problem/appetite validation

    pm_shape_up_mode:
      - Focus on business perspective and stakeholder impact
      - Define scope boundaries and clear "no-gos"
      - Business risk mitigation and stakeholder communication
      - Success metrics and business outcomes definition
      - Appetite discipline from business perspective

    ux_expert_shape_up_mode:
      - Create fat marker sketches using breadboarding technique (Shape Up Ch.4)
      - Option 1: Text-based breadboards (traditional Shape Up format)
      - Option 2: Mermaid diagram breadboards (visual flow representation)
      - Define places, affordances, and connections without visual design details
      - Use mermaid flowcharts to show user flow: Places as nodes, affordances as arrow labels
      - High-level user flows preserving developer autonomy
      - Focus on "what" and "where" not "how" to implement

    po_shape_up_mode:
      - Break solution into basic tasks/epics for estimation
      - Request rough estimates from architect for appetite validation
      - Create task breakdown without detailed specifications
      - Focus on logical work units that can be estimated
      - Prepare for appetite vs estimate comparison

    architect_shape_up_mode:
      - Provide rough estimates for PO task breakdown
      - Estimate complexity and effort for appetite validation
      - Identify technical risks that could affect estimates
      - Flag integration challenges that could blow scope
      - Focus on effort assessment, NOT solution prescription
      - Preserve developer autonomy while providing realistic estimates
      - Help validate if solution fits within appetite constraints

  handoff_prompts:
    orchestrator_to_analyst: "Welcome! I'm handing you over to our Business Analyst for complete discovery. She'll gather raw idea, current state, appetite, and problem validation."
    analyst_to_pm: "Complete discovery finished. Raw idea, current state, and problem validation saved. Appetite defined: {{appetite}}. Now focus on business scope and boundaries. Save to docs/business-scope.md"
    pm_to_ux_expert: "Shape Up pitch created and saved. Now create text-based fat marker sketches using breadboarding technique. Save to docs/solution-sketches.md"
    ux_expert_to_po: "Solution sketches saved to docs/solution-sketches.md. Now break this down into basic tasks/epics for estimation validation. Save to docs/deliverability-assessment.md"
    po_to_architect: "Task breakdown complete and saved. Now provide rough estimates for each task/epic to validate against appetite. Save to docs/technical-estimates.md"
    architect_to_orchestrator: "Rough estimates provided. Ready for appetite validation - compare estimates against original appetite and determine if scope cutting needed."
    orchestrator_to_pm_scope_cut: "Estimates exceed appetite by [amount]. Need to cut scope to fit appetite constraints. Please refine the business scope to reduce complexity."
    orchestrator_final: "Estimates fit within appetite. Creating final Shape Up pitch using template."
    issues_found: "Issues found in [section] by [agent]. Please return to [responsible_agent] to fix within appetite constraints. Remember to ask clarifying questions."
    complete: "Shape Up pitch created and saved to docs/shape-up-final-pitch.md. All artifacts saved to docs/ folder and ready for betting table consideration."
